{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  function dagImport(source) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        const controller = new AbortController();\n        const signal = abortSignal(controller.signal, options.signal);\n        const {\n          headers,\n          body\n        } = await multipartRequest(source, controller, options.headers);\n        const res = await api.post('dag/import', {\n          signal,\n          headers,\n          body,\n          searchParams: toUrlSearchParams({\n            'pin-roots': options.pinRoots\n          })\n        });\n        for await (const {\n          Root\n        } of res.ndjson()) {\n          if (Root !== undefined) {\n            const {\n              Cid: {\n                '/': Cid\n              },\n              PinErrorMsg\n            } = Root;\n            yield {\n              root: {\n                cid: CID.parse(Cid),\n                pinErrorMsg: PinErrorMsg\n              }\n            };\n          }\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return dagImport;\n});","map":{"version":3,"names":["configure","toUrlSearchParams","abortSignal","multipartRequest","CID","createImport","api","dagImport","source","options","controller","AbortController","signal","headers","body","res","post","searchParams","pinRoots","Root","ndjson","undefined","Cid","PinErrorMsg","root","cid","parse","pinErrorMsg"],"sources":["/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/node_modules/ipfs-http-client/src/dag/import.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,GAAG,QAAQ,kBAAkB;;AAEtC;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGL,SAAS,CAACM,GAAG,IAAI;EAC3C;AACF;AACA;EACE,SAAiBC,SAAS,CAAEC,MAAM;IAAA;MAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;MAAA,0BAAE;QAChD,MAAMC,UAAU,GAAG,IAAIC,eAAe,EAAE;QACxC,MAAMC,MAAM,GAAGV,WAAW,CAACQ,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC;QAC7D,MAAM;UAAEC,OAAO;UAAEC;QAAK,CAAC,GAAG,MAAMX,gBAAgB,CAACK,MAAM,EAAEE,UAAU,EAAED,OAAO,CAACI,OAAO,CAAC;QAErF,MAAME,GAAG,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,YAAY,EAAE;UACvCJ,MAAM;UACNC,OAAO;UACPC,IAAI;UACJG,YAAY,EAAEhB,iBAAiB,CAAC;YAAE,WAAW,EAAEQ,OAAO,CAACS;UAAS,CAAC;QACnE,CAAC,CAAC;QAEF,WAAW,MAAM;UAAEC;QAAK,CAAC,IAAIJ,GAAG,CAACK,MAAM,EAAE,EAAE;UACzC,IAAID,IAAI,KAAKE,SAAS,EAAE;YACtB,MAAM;cAAEC,GAAG,EAAE;gBAAE,GAAG,EAAEA;cAAI,CAAC;cAAEC;YAAY,CAAC,GAAGJ,IAAI;YAE/C,MAAM;cACJK,IAAI,EAAE;gBACJC,GAAG,EAAErB,GAAG,CAACsB,KAAK,CAACJ,GAAG,CAAC;gBACnBK,WAAW,EAAEJ;cACf;YACF,CAAC;UACH;QACF;MACF,CAAC;IAAA;MAAA;IAAA;EAAA;EAED,OAAOhB,SAAS;AAClB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}