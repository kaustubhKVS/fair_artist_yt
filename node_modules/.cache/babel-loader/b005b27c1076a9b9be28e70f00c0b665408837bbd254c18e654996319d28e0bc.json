{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createAddAll = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  function addAll(source) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        for await (const {\n          path,\n          recursive,\n          metadata\n        } of normaliseInput(source)) {\n          const res = await api.post('pin/add', {\n            signal: options.signal,\n            searchParams: toUrlSearchParams({\n              ...options,\n              arg: path,\n              recursive,\n              metadata: metadata ? JSON.stringify(metadata) : undefined,\n              stream: true\n            }),\n            headers: options.headers\n          });\n          for await (const pin of res.ndjson()) {\n            if (pin.Pins) {\n              // non-streaming response\n              for (const cid of pin.Pins) {\n                yield CID.parse(cid);\n              }\n              continue;\n            }\n            yield CID.parse(pin);\n          }\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return addAll;\n});","map":{"version":3,"names":["CID","configure","normaliseInput","toUrlSearchParams","createAddAll","api","addAll","source","options","path","recursive","metadata","res","post","signal","searchParams","arg","JSON","stringify","undefined","stream","headers","pin","ndjson","Pins","cid","parse"],"sources":["/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/node_modules/ipfs-http-client/src/pin/add-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createAddAll = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid)\n          }\n          continue\n        }\n\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return addAll\n})\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,cAAc,QAAQ,sCAAsC;AACrE,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC3C;AACF;AACA;EACE,SAAiBC,MAAM,CAAEC,MAAM;IAAA;MAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;MAAA,0BAAE;QAC7C,WAAW,MAAM;UAAEC,IAAI;UAAEC,SAAS;UAAEC;QAAS,CAAC,IAAIT,cAAc,CAACK,MAAM,CAAC,EAAE;UACxE,MAAMK,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,SAAS,EAAE;YACpCC,MAAM,EAAEN,OAAO,CAACM,MAAM;YACtBC,YAAY,EAAEZ,iBAAiB,CAAC;cAC9B,GAAGK,OAAO;cACVQ,GAAG,EAAEP,IAAI;cACTC,SAAS;cACTC,QAAQ,EAAEA,QAAQ,GAAGM,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,GAAGQ,SAAS;cACzDC,MAAM,EAAE;YACV,CAAC,CAAC;YACFC,OAAO,EAAEb,OAAO,CAACa;UACnB,CAAC,CAAC;UAEF,WAAW,MAAMC,GAAG,IAAIV,GAAG,CAACW,MAAM,EAAE,EAAE;YACpC,IAAID,GAAG,CAACE,IAAI,EAAE;cAAE;cACd,KAAK,MAAMC,GAAG,IAAIH,GAAG,CAACE,IAAI,EAAE;gBAC1B,MAAMxB,GAAG,CAAC0B,KAAK,CAACD,GAAG,CAAC;cACtB;cACA;YACF;YAEA,MAAMzB,GAAG,CAAC0B,KAAK,CAACJ,GAAG,CAAC;UACtB;QACF;MACF,CAAC;IAAA;MAAA;IAAA;EAAA;EACD,OAAOhB,MAAM;AACf,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}