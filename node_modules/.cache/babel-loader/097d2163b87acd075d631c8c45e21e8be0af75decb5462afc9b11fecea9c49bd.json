{"ast":null,"code":"var _jsxFileName = \"/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst projectId = process.env.REACT_APP_PROJECT_ID;\nconst projectSecretKey = process.env.REACT_APP_PROJECT_KEY;\nconst authorization = \"Basic \" + btoa(projectId + \":\" + projectSecretKey);\nfunction App() {\n  _s();\n  const [uploadedImages, setUploadedImages] = useState([]); //devstate hook variables\n  const ipfs = ipfsHttpClient({\n    url: \"https://ipfs.infura.io:5001/api/v0\",\n    headers: {\n      authorization\n    }\n  });\n  const onSubmitHandler = async event => {\n    event.preventDefault();\n    const form = event.target;\n    const files = form[0].files;\n    if (!files || files.length === 0) {\n      return alert(\"No files selected\");\n    }\n    const file = files[0];\n    // upload files\n    const result = await ipfs.add(file);\n    setUploadedImages([...uploadedImages, {\n      cid: result.cid,\n      path: result.path\n    }]);\n    form.reset();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__container\",\n      children: [ipfs ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"IPFS uploader\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: onSubmitHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"file-upload\",\n            class: \"custom-file-upload\",\n            children: \"Select File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"file-upload\",\n            type: \"file\",\n            name: \"file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            type: \"submit\",\n            children: \"Upload file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data\",\n        children: uploadedImages.map((image, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"image\",\n            alt: `Uploaded #${index + 1}`,\n            src: \"https://skywalker.infura-ipfs.io/ipfs/\" + image.path,\n            style: {\n              maxWidth: \"400px\",\n              margin: \"15px\"\n            }\n          }, image.cid.toString() + index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Link to IPFS:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://skywalker.infura-ipfs.io/ipfs/\" + image.path,\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"https://skywalker.infura-ipfs.io/ipfs/\" + image.path\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"E9JQ73uUu+xf+/pSf5IddKMNo6Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","create","ipfsHttpClient","projectId","process","env","REACT_APP_PROJECT_ID","projectSecretKey","REACT_APP_PROJECT_KEY","authorization","btoa","App","uploadedImages","setUploadedImages","ipfs","url","headers","onSubmitHandler","event","preventDefault","form","target","files","length","alert","file","result","add","cid","path","reset","map","image","index","maxWidth","margin","toString"],"sources":["/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport { create as ipfsHttpClient } from \"ipfs-http-client\";\n\nconst projectId = process.env.REACT_APP_PROJECT_ID;\nconst projectSecretKey = process.env.REACT_APP_PROJECT_KEY;\nconst authorization = \"Basic \" + btoa(projectId + \":\" + projectSecretKey);\n\nfunction App() {\n  const [uploadedImages, setUploadedImages] = useState([]); //devstate hook variables\n  const ipfs = ipfsHttpClient({\n    url: \"https://ipfs.infura.io:5001/api/v0\",\n    headers: {\n      authorization,\n    },\n  });\n  const onSubmitHandler = async (event) => {\n    event.preventDefault();\n    const form = event.target;\n    const files = form[0].files;\n\n    if (!files || files.length === 0) {\n      return alert(\"No files selected\");\n    }\n\n    const file = files[0];\n    // upload files\n    const result = await ipfs.add(file);\n\n    setUploadedImages([\n      ...uploadedImages,\n      {\n        cid: result.cid,\n        path: result.path,\n      },\n    ]);\n\n    form.reset();\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__container\">\n        {ipfs ? (\n          <div className=\"container\">\n            <h1>IPFS uploader</h1>\n            <form onSubmit={onSubmitHandler}>\n              <label for=\"file-upload\" class=\"custom-file-upload\">\n                Select File\n              </label>\n              <input id=\"file-upload\" type=\"file\" name=\"file\" />\n              <button className=\"button\" type=\"submit\">\n                Upload file\n              </button>\n            </form>\n          </div>\n        ) : null}\n        <div className=\"data\">\n          {uploadedImages.map((image, index) => (\n            <>\n              <img\n                className=\"image\"\n                alt={`Uploaded #${index + 1}`}\n                src={\"https://skywalker.infura-ipfs.io/ipfs/\" + image.path}\n                style={{ maxWidth: \"400px\", margin: \"15px\" }}\n                key={image.cid.toString() + index}\n              />\n              <h4>Link to IPFS:</h4>\n              <a href={\"https://skywalker.infura-ipfs.io/ipfs/\" + image.path}>\n                <h3>{\"https://skywalker.infura-ipfs.io/ipfs/\" + image.path}</h3>\n              </a>\n            </>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}