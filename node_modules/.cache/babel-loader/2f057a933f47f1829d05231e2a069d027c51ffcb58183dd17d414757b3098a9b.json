{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n */\n\n/**\n * @param {object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nexport const decodePin = _ref => {\n  let {\n    Name: name,\n    Status: status,\n    Cid: cid\n  } = _ref;\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  };\n};\n\n/**\n * @param {any} service\n * @returns {string}\n */\nexport const encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nexport const encodeCID = cid => {\n  if (CID.asCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`);\n  }\n};\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nexport const encodeQuery = _ref2 => {\n  let {\n    service,\n    cid,\n    name,\n    status,\n    all\n  } = _ref2;\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n  return query;\n};\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nexport const encodeAddParams = _ref3 => {\n  let {\n    cid,\n    service,\n    background,\n    name,\n    origins\n  } = _ref3;\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n  return params;\n};","map":{"version":3,"names":["CID","toUrlSearchParams","decodePin","Name","name","Status","status","Cid","cid","parse","encodeService","service","TypeError","encodeCID","asCID","toString","encodeQuery","all","query","force","undefined","value","append","encodeAddParams","background","origins","params","arg","origin"],"sources":["/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/node_modules/ipfs-http-client/src/pin/remote/utils.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n */\n\n/**\n * @param {object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nexport const decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nexport const encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nexport const encodeCID = (cid) => {\n  if (CID.asCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nexport const encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nexport const encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,iBAAiB,QAAQ,mCAAmC;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,QAA8C;EAAA,IAA7C;IAAEC,IAAI,EAAEC,IAAI;IAAEC,MAAM,EAAEC,MAAM;IAAEC,GAAG,EAAEC;EAAI,CAAC;EAChE,OAAO;IACLA,GAAG,EAAER,GAAG,CAACS,KAAK,CAACD,GAAG,CAAC;IACnBJ,IAAI;IACJE;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,aAAa,GAAIC,OAAO,IAAK;EACxC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,EAAE,EAAE;IACjD,OAAOA,OAAO;EAChB,CAAC,MAAM;IACL,MAAM,IAAIC,SAAS,CAAC,6BAA6B,CAAC;EACpD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAIL,GAAG,IAAK;EAChC,IAAIR,GAAG,CAACc,KAAK,CAACN,GAAG,CAAC,EAAE;IAClB,OAAOA,GAAG,CAACO,QAAQ,EAAE;EACvB,CAAC,MAAM;IACL,MAAM,IAAIH,SAAS,CAAE,oCAAmC,OAAOJ,GAAI,EAAC,CAAC;EACvE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMQ,WAAW,GAAG,SAAyC;EAAA,IAAxC;IAAEL,OAAO;IAAEH,GAAG;IAAEJ,IAAI;IAAEE,MAAM;IAAEW;EAAI,CAAC;EAC7D,MAAMC,KAAK,GAAGjB,iBAAiB,CAAC;IAC9BU,OAAO,EAAED,aAAa,CAACC,OAAO,CAAC;IAC/BP,IAAI;IACJe,KAAK,EAAEF,GAAG,GAAG,IAAI,GAAGG;EACtB,CAAC,CAAC;EAEF,IAAIZ,GAAG,EAAE;IACP,KAAK,MAAMa,KAAK,IAAIb,GAAG,EAAE;MACvBU,KAAK,CAACI,MAAM,CAAC,KAAK,EAAET,SAAS,CAACQ,KAAK,CAAC,CAAC;IACvC;EACF;EAEA,IAAIf,MAAM,EAAE;IACV,KAAK,MAAMe,KAAK,IAAIf,MAAM,EAAE;MAC1BY,KAAK,CAACI,MAAM,CAAC,QAAQ,EAAED,KAAK,CAAC;IAC/B;EACF;EAEA,OAAOH,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,eAAe,GAAG,SAAiD;EAAA,IAAhD;IAAEf,GAAG;IAAEG,OAAO;IAAEa,UAAU;IAAEpB,IAAI;IAAEqB;EAAQ,CAAC;EACzE,MAAMC,MAAM,GAAGzB,iBAAiB,CAAC;IAC/B0B,GAAG,EAAEd,SAAS,CAACL,GAAG,CAAC;IACnBG,OAAO,EAAED,aAAa,CAACC,OAAO,CAAC;IAC/BP,IAAI;IACJoB,UAAU,EAAEA,UAAU,GAAG,IAAI,GAAGJ;EAClC,CAAC,CAAC;EAEF,IAAIK,OAAO,EAAE;IACX,KAAK,MAAMG,MAAM,IAAIH,OAAO,EAAE;MAC5BC,MAAM,CAACJ,MAAM,CAAC,QAAQ,EAAEM,MAAM,CAACb,QAAQ,EAAE,CAAC;IAC5C;EACF;EAEA,OAAOW,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}