{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { createStat } from './files/stat.js';\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createLs = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  function ls(path) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`;\n\n        /**\n         * @param {*} link\n         */\n        async function mapLink(link) {\n          let hash = link.Hash;\n          if (hash.includes('/')) {\n            // the hash is a path, but we need the CID\n            const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`;\n            const stats = await createStat(opts)(ipfsPath);\n            hash = stats.cid;\n          } else {\n            hash = CID.parse(hash);\n          }\n\n          /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n          const entry = {\n            name: link.Name,\n            path: pathStr + (link.Name ? `/${link.Name}` : ''),\n            size: link.Size,\n            cid: hash,\n            type: typeOf(link)\n          };\n          if (link.Mode) {\n            entry.mode = parseInt(link.Mode, 8);\n          }\n          if (link.Mtime !== undefined && link.Mtime !== null) {\n            entry.mtime = {\n              secs: link.Mtime\n            };\n            if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n              entry.mtime.nsecs = link.MtimeNsecs;\n            }\n          }\n          return entry;\n        }\n        const res = await api.post('ls', {\n          signal: options.signal,\n          searchParams: toUrlSearchParams({\n            arg: pathStr,\n            ...options\n          }),\n          headers: options.headers\n        });\n        for await (let result of res.ndjson()) {\n          result = result.Objects;\n          if (!result) {\n            throw new Error('expected .Objects in results');\n          }\n          result = result[0];\n          if (!result) {\n            throw new Error('expected one array in results.Objects');\n          }\n          const links = result.Links;\n          if (!Array.isArray(links)) {\n            throw new Error('expected one array in results.Objects[0].Links');\n          }\n          if (!links.length) {\n            // no links, this is a file, yield a single result\n            yield mapLink(result);\n            return;\n          }\n          yield* links.map(mapLink);\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return ls;\n});\n\n/**\n * @param {any} link\n */\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n    case 2:\n      return 'file';\n    default:\n      return 'file';\n  }\n}","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createStat","createLs","api","opts","ls","path","options","pathStr","Uint8Array","decode","mapLink","link","hash","Hash","includes","ipfsPath","startsWith","stats","cid","parse","entry","name","Name","size","Size","type","typeOf","Mode","mode","parseInt","Mtime","undefined","mtime","secs","MtimeNsecs","nsecs","res","post","signal","searchParams","arg","headers","result","ndjson","Objects","Error","links","Links","Array","isArray","length","map","Type"],"sources":["/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/node_modules/ipfs-http-client/src/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { createStat } from './files/stat.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createLs = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await createStat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}