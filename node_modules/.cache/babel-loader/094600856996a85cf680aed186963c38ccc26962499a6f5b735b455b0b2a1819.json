{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nexport const createLs = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  function ls(path) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        if (!path) {\n          throw new Error('ipfs.files.ls requires a path');\n        }\n        const res = await api.post('files/ls', {\n          signal: options.signal,\n          searchParams: toUrlSearchParams({\n            arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n            // default long to true, diverges from go-ipfs where its false by default\n            long: true,\n            ...options,\n            stream: true\n          }),\n          headers: options.headers\n        });\n        for await (const result of res.ndjson()) {\n          // go-ipfs does not yet support the \"stream\" option\n          if ('Entries' in result) {\n            for (const entry of result.Entries || []) {\n              yield toCoreInterface(objectToCamelWithMetadata(entry));\n            }\n          } else {\n            yield toCoreInterface(objectToCamelWithMetadata(result));\n          }\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return ls;\n});\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"names":["CID","objectToCamelWithMetadata","configure","toUrlSearchParams","createLs","api","ls","path","options","Error","res","post","signal","searchParams","arg","asCID","long","stream","headers","result","ndjson","entry","Entries","toCoreInterface","hash","cid","parse","type"],"sources":["/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/node_modules/ipfs-http-client/src/files/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nexport const createLs = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,yBAAyB,QAAQ,yCAAyC;AACnF,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;EACvC;AACF;AACA;EACE,SAAiBC,EAAE,CAAEC,IAAI;IAAA;MAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;MAAA,0BAAE;QACvC,IAAI,CAACD,IAAI,EAAE;UACT,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;QAClD;QAEA,MAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,UAAU,EAAE;UACrCC,MAAM,EAAEJ,OAAO,CAACI,MAAM;UACtBC,YAAY,EAAEV,iBAAiB,CAAC;YAC9BW,GAAG,EAAEd,GAAG,CAACe,KAAK,CAACR,IAAI,CAAC,GAAI,SAAQA,IAAK,EAAC,GAAGA,IAAI;YAC7C;YACAS,IAAI,EAAE,IAAI;YACV,GAAGR,OAAO;YACVS,MAAM,EAAE;UACV,CAAC,CAAC;UACFC,OAAO,EAAEV,OAAO,CAACU;QACnB,CAAC,CAAC;QAEF,WAAW,MAAMC,MAAM,IAAIT,GAAG,CAACU,MAAM,EAAE,EAAE;UACvC;UACA,IAAI,SAAS,IAAID,MAAM,EAAE;YACvB,KAAK,MAAME,KAAK,IAAIF,MAAM,CAACG,OAAO,IAAI,EAAE,EAAE;cACxC,MAAMC,eAAe,CAACtB,yBAAyB,CAACoB,KAAK,CAAC,CAAC;YACzD;UACF,CAAC,MAAM;YACL,MAAME,eAAe,CAACtB,yBAAyB,CAACkB,MAAM,CAAC,CAAC;UAC1D;QACF;MACF,CAAC;IAAA;MAAA;IAAA;EAAA;EACD,OAAOb,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASiB,eAAe,CAAEF,KAAK,EAAE;EAC/B,IAAIA,KAAK,CAACG,IAAI,EAAE;IACdH,KAAK,CAACI,GAAG,GAAGzB,GAAG,CAAC0B,KAAK,CAACL,KAAK,CAACG,IAAI,CAAC;EACnC;EAEA,OAAOH,KAAK,CAACG,IAAI;EAEjBH,KAAK,CAACM,IAAI,GAAGN,KAAK,CAACM,IAAI,KAAK,CAAC,GAAG,WAAW,GAAG,MAAM;EAEpD,OAAON,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}