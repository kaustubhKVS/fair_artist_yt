{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createCp = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp(sources, destination) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources];\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    });\n    await res.text();\n  }\n  return cp;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createCp","api","cp","sources","destination","options","sourceArr","Array","isArray","res","post","signal","searchParams","arg","concat","map","src","asCID","headers","text"],"sources":["/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/node_modules/ipfs-http-client/src/files/cp.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createCp = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp (sources, destination, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources]\n\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return cp\n})\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;EACvC;AACF;AACA;EACE,eAAeC,EAAE,CAAEC,OAAO,EAAEC,WAAW,EAAgB;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IACnD;IACA,MAAMC,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACL,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;IAE9D,MAAMM,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,UAAU,EAAE;MACrCC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEb,iBAAiB,CAAC;QAC9Bc,GAAG,EAAEP,SAAS,CAACQ,MAAM,CAACV,WAAW,CAAC,CAACW,GAAG,CAACC,GAAG,IAAInB,GAAG,CAACoB,KAAK,CAACD,GAAG,CAAC,GAAI,SAAQA,GAAI,EAAC,GAAGA,GAAG,CAAC;QACpF,GAAGX;MACL,CAAC,CAAC;MACFa,OAAO,EAAEb,OAAO,CAACa;IACnB,CAAC,CAAC;IAEF,MAAMT,GAAG,CAACU,IAAI,EAAE;EAClB;EACA,OAAOjB,EAAE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}