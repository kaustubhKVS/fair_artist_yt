{"ast":null,"code":"import { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  if (globalThis.Buffer?.alloc != null) {\n    return asUint8Array(globalThis.Buffer.alloc(size));\n  }\n  return new Uint8Array(size);\n}\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  if (globalThis.Buffer?.allocUnsafe != null) {\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n  }\n  return new Uint8Array(size);\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAQ,yBAAyB;AAEtD;;;;AAIA,OAAM,SAAUC,KAAK,GAAkB;EAAA,IAAhBC,2EAAe,CAAC;EACrC,IAAIC,UAAU,CAACC,MAAM,EAAEH,KAAK,IAAI,IAAI,EAAE;IACpC,OAAOD,YAAY,CAACG,UAAU,CAACC,MAAM,CAACH,KAAK,CAACC,IAAI,CAAC,CAAC;;EAGpD,OAAO,IAAIG,UAAU,CAACH,IAAI,CAAC;AAC7B;AAEA;;;;;AAKA,OAAM,SAAUI,WAAW,GAAkB;EAAA,IAAhBJ,2EAAe,CAAC;EAC3C,IAAIC,UAAU,CAACC,MAAM,EAAEE,WAAW,IAAI,IAAI,EAAE;IAC1C,OAAON,YAAY,CAACG,UAAU,CAACC,MAAM,CAACE,WAAW,CAACJ,IAAI,CAAC,CAAC;;EAG1D,OAAO,IAAIG,UAAU,CAACH,IAAI,CAAC;AAC7B","names":["asUint8Array","alloc","size","globalThis","Buffer","Uint8Array","allocUnsafe"],"sources":["/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/node_modules/uint8arrays/src/alloc.ts"],"sourcesContent":["import { asUint8Array } from './util/as-uint8array.js'\n\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc (size: number = 0): Uint8Array {\n  if (globalThis.Buffer?.alloc != null) {\n    return asUint8Array(globalThis.Buffer.alloc(size))\n  }\n\n  return new Uint8Array(size)\n}\n\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe (size: number = 0): Uint8Array {\n  if (globalThis.Buffer?.allocUnsafe != null) {\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size))\n  }\n\n  return new Uint8Array(size)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}