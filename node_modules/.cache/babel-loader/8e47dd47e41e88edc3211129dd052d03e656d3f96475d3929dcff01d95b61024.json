{"ast":null,"code":"var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [getProtocol('dns').code, getProtocol('dns4').code, getProtocol('dns6').code, getProtocol('dnsaddr').code];\nconst P2P_CODES = [getProtocol('p2p').code, getProtocol('ipfs').code];\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n  if (addr == null) {\n    throw new Error('requires node address object');\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol');\n  }\n  let ip;\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4';\n      break;\n    case 6:\n      ip = 'ip6';\n      break;\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.');\n  }\n  return new DefaultMultiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a Multiaddr that is a name\n */\nexport function isName(addr) {\n  if (!isMultiaddr(addr)) {\n    return false;\n  }\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some(proto => proto.resolvable);\n}\n/**\n * Check if object is a CID instance\n */\nexport function isMultiaddr(value) {\n  return Boolean(value?.[symbol]);\n}\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nclass DefaultMultiaddr {\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor(addr) {\n    _DefaultMultiaddr_string.set(this, void 0);\n    _DefaultMultiaddr_tuples.set(this, void 0);\n    _DefaultMultiaddr_stringTuples.set(this, void 0);\n    this[_a] = true;\n    // default\n    if (addr == null) {\n      addr = '';\n    }\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n      }\n      this.bytes = codec.fromString(addr);\n    } else if (isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n  toString() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n    }\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toOptions() {\n    const codes = this.protoCodes();\n    const parts = this.toString().split('/').slice(1);\n    let transport;\n    let port;\n    if (parts.length > 2) {\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n        transport = getProtocol('tcp').name;\n        port = 443;\n      } else {\n        transport = getProtocol(parts[2]).name;\n        port = parseInt(parts[3]);\n      }\n    } else if (DNS_CODES.includes(codes[0])) {\n      transport = getProtocol('tcp').name;\n      port = 443;\n    } else {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n    }\n    const opts = {\n      family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n      host: parts[1],\n      transport,\n      port\n    };\n    return opts;\n  }\n  protos() {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n  }\n  protoCodes() {\n    const codes = [];\n    const buf = this.bytes;\n    let i = 0;\n    while (i < buf.length) {\n      const code = varint.decode(buf, i);\n      const n = varint.decode.bytes;\n      const p = getProtocol(code);\n      const size = codec.sizeForAddr(p, buf.slice(i + n));\n      i += size + n;\n      codes.push(code);\n    }\n    return codes;\n  }\n  protoNames() {\n    return this.protos().map(proto => proto.name);\n  }\n  tuples() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n    }\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n  }\n  stringTuples() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n    }\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n  }\n  encapsulate(addr) {\n    addr = new DefaultMultiaddr(addr);\n    return new DefaultMultiaddr(this.toString() + addr.toString());\n  }\n  decapsulate(addr) {\n    const addrString = addr.toString();\n    const s = this.toString();\n    const i = s.lastIndexOf(addrString);\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n    }\n    return new DefaultMultiaddr(s.slice(0, i));\n  }\n  decapsulateCode(code) {\n    const tuples = this.tuples();\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n      }\n    }\n    return this;\n  }\n  getPeerId() {\n    try {\n      const tuples = this.stringTuples().filter(tuple => {\n        if (tuple[0] === names.ipfs.code) {\n          return true;\n        }\n        return false;\n      });\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop();\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1];\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n        }\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n  getPath() {\n    let path = null;\n    try {\n      path = this.stringTuples().filter(tuple => {\n        const proto = getProtocol(tuple[0]);\n        if (proto.path === true) {\n          return true;\n        }\n        return false;\n      })[0][1];\n      if (path == null) {\n        path = null;\n      }\n    } catch {\n      path = null;\n    }\n    return path;\n  }\n  equals(addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes);\n  }\n  async resolve(options) {\n    const resolvableProto = this.protos().find(p => p.resolvable);\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this];\n    }\n    const resolver = resolvers.get(resolvableProto.name);\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n    }\n    const addresses = await resolver(this, options);\n    return addresses.map(a => new DefaultMultiaddr(a));\n  }\n  nodeAddress() {\n    const options = this.toOptions();\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n    }\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    };\n  }\n  isThinWaistAddress(addr) {\n    const protos = (addr ?? this).protos();\n    if (protos.length !== 2) {\n      return false;\n    }\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false;\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n    return this.inspect();\n  }\n  inspect() {\n    return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n  }\n}\n/**\n * Static factory\n *\n * @example\n * ```js\n * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n  return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };","map":{"version":3,"mappings":"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","names":["codec","getProtocol","names","varint","CID","base58btc","errCode","toString","uint8ArrayToString","equals","uint8ArrayEquals","inspect","Symbol","for","DNS_CODES","code","P2P_CODES","resolvers","Map","symbol","fromNodeAddress","addr","transport","Error","ip","family","DefaultMultiaddr","address","port","join","isName","isMultiaddr","protos","some","proto","resolvable","value","Boolean","constructor","_DefaultMultiaddr_string","_DefaultMultiaddr_tuples","_DefaultMultiaddr_stringTuples","Uint8Array","bytes","fromBytes","length","charAt","fromString","__classPrivateFieldGet","__classPrivateFieldSet","bytesToString","toJSON","toOptions","codes","protoCodes","parts","split","slice","includes","name","parseInt","opts","host","map","Object","assign","buf","i","decode","n","p","size","sizeForAddr","push","protoNames","tuples","bytesToTuples","stringTuples","tuplesToStringTuples","encapsulate","decapsulate","addrString","s","lastIndexOf","decapsulateCode","tuplesToBytes","getPeerId","filter","tuple","ipfs","pop","peerIdStr","parse","multihash","e","getPath","path","resolve","options","resolvableProto","find","resolver","get","addresses","a","nodeAddress","isThinWaistAddress","multiaddr","protocols"],"sources":["/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/node_modules/@multiformats/multiaddr/src/index.ts"],"sourcesContent":["import * as codec from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport varint from 'varint'\nimport { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport errCode from 'err-code'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\nconst P2P_CODES = [\n  getProtocol('p2p').code,\n  getProtocol('ipfs').code\n]\n\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: string\n  port: number\n}\n\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\nexport interface Resolver { (addr: Multiaddr, options?: AbortOptions): Promise<string[]> }\n\nexport type Tuple = [number, Uint8Array?]\n\nexport type StringTuple = [number, string?]\n\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\nexport const resolvers = new Map<string, Resolver>()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\nexport interface Multiaddr {\n  bytes: Uint8Array\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString: () => string\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON: () => string\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions: () => MultiaddrObject\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos: () => Protocol[]\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes: () => number[]\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames: () => string[]\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples: () => Tuple[]\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples: () => StringTuple[]\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate: (addr: MultiaddrInput) => Multiaddr\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate: (addr: Multiaddr | string) => Multiaddr\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode: (code: number) => Multiaddr\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId: () => string | null\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath: () => string | null\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals: (addr: { bytes: Uint8Array }) => boolean\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   */\n  resolve: (options?: AbortOptions) => Promise<Multiaddr[]>\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress: () => NodeAddress\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress: (addr?: Multiaddr) => boolean\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  inspect: () => string\n}\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * ```\n */\nexport function fromNodeAddress (addr: NodeAddress, transport: string): Multiaddr {\n  if (addr == null) {\n    throw new Error('requires node address object')\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol')\n  }\n  let ip\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4'\n      break\n    case 6:\n      ip = 'ip6'\n      break\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.')\n  }\n  return new DefaultMultiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\n}\n\n/**\n * Returns if something is a Multiaddr that is a name\n */\nexport function isName (addr: Multiaddr): boolean {\n  if (!isMultiaddr(addr)) {\n    return false\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some((proto) => proto.resolvable)\n}\n\n/**\n * Check if object is a CID instance\n */\nexport function isMultiaddr (value: any): value is Multiaddr {\n  return Boolean(value?.[symbol])\n}\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nclass DefaultMultiaddr implements Multiaddr {\n  public bytes: Uint8Array\n  #string?: string\n  #tuples?: Tuple[]\n  #stringTuples?: StringTuple[]\n\n  [symbol]: boolean = true\n\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  toString () {\n    if (this.#string == null) {\n      this.#string = codec.bytesToString(this.bytes)\n    }\n\n    return this.#string\n  }\n\n  toJSON () {\n    return this.toString()\n  }\n\n  toOptions (): MultiaddrObject {\n    const codes = this.protoCodes()\n    const parts = this.toString().split('/').slice(1)\n    let transport: string\n    let port: number\n\n    if (parts.length > 2) {\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n        transport = getProtocol('tcp').name\n        port = 443\n      } else {\n        transport = getProtocol(parts[2]).name\n        port = parseInt(parts[3])\n      }\n    } else if (DNS_CODES.includes(codes[0])) {\n      transport = getProtocol('tcp').name\n      port = 443\n    } else {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\n      host: parts[1],\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  protos (): Protocol[] {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)))\n  }\n\n  protoCodes (): number[] {\n    const codes: number[] = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes\n\n      const p = getProtocol(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  protoNames (): string[] {\n    return this.protos().map(proto => proto.name)\n  }\n\n  tuples (): Array<[number, Uint8Array?]> {\n    if (this.#tuples == null) {\n      this.#tuples = codec.bytesToTuples(this.bytes)\n    }\n\n    return this.#tuples\n  }\n\n  stringTuples (): Array<[number, string?]> {\n    if (this.#stringTuples == null) {\n      this.#stringTuples = codec.tuplesToStringTuples(this.tuples())\n    }\n\n    return this.#stringTuples\n  }\n\n  encapsulate (addr: MultiaddrInput): Multiaddr {\n    addr = new DefaultMultiaddr(addr)\n    return new DefaultMultiaddr(this.toString() + addr.toString())\n  }\n\n  decapsulate (addr: Multiaddr | string): Multiaddr {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new DefaultMultiaddr(s.slice(0, i))\n  }\n\n  decapsulateCode (code: number): Multiaddr {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  getPeerId (): string | null {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  getPath (): string | null {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = getProtocol(tuple[0])\n        if (proto.path === true) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (path == null) {\n        path = null\n      }\n    } catch {\n      path = null\n    }\n    return path\n  }\n\n  equals (addr: { bytes: Uint8Array }) {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  async resolve (options?: AbortOptions): Promise<Multiaddr[]> {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this, options)\n    return addresses.map((a) => new DefaultMultiaddr(a))\n  }\n\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  isThinWaistAddress (addr?: Multiaddr) {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  [inspect] () {\n    return this.inspect()\n  }\n\n  inspect () {\n    return '<Multiaddr ' +\n      uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n      codec.bytesToString(this.bytes) + '>'\n  }\n}\n\n/**\n * Static factory\n *\n * @example\n * ```js\n * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr (addr?: MultiaddrInput): Multiaddr {\n  return new DefaultMultiaddr(addr)\n}\n\nexport { getProtocol as protocols }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}