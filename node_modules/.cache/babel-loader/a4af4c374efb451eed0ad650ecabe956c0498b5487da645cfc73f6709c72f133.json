{"ast":null,"code":"/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default function browserReadableStreamToIt(stream) {\n  try {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return async function* () {\n      const reader = stream.getReader();\n      try {\n        while (true) {\n          const result = await reader.read();\n          if (result.done) {\n            return;\n          }\n          yield result.value;\n        }\n      } finally {\n        if (options.preventCancel !== true) {\n          await reader.cancel();\n        }\n        reader.releaseLock();\n      }\n    }();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}","map":{"version":3,"mappings":"AAKA;;;;;;;AAOA,eAAe,SAAiBA,yBAAyB,CAAMC,MAAyB;EAAA;IAAA,IAAEC,8EAA4C,EAAE;IAAA;MACtI,MAAMC,MAAM,GAAGF,MAAM,CAACG,SAAS,EAAE;MAEjC,IAAI;QACF,OAAO,IAAI,EAAE;UACX,MAAMC,MAAM,GAAG,MAAMF,MAAM,CAACG,IAAI,EAAE;UAElC,IAAID,MAAM,CAACE,IAAI,EAAE;YACf;;UAGF,MAAMF,MAAM,CAACG,KAAK;;OAErB,SAAS;QACR,IAAIN,OAAO,CAACO,aAAa,KAAK,IAAI,EAAE;UAClC,MAAMN,MAAM,CAACO,MAAM,EAAE;;QAGvBP,MAAM,CAACQ,WAAW,EAAE;;IAExB,CAAC;EAAA;IAAA;EAAA;AAAA","names":["browserReadableStreamToIt","stream","options","reader","getReader","result","read","done","value","preventCancel","cancel","releaseLock"],"sources":["/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/node_modules/browser-readablestream-to-it/src/index.ts"],"sourcesContent":["\nexport interface BrowserReadableStreamToItOptions {\n  preventCancel?: boolean\n}\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function * browserReadableStreamToIt <T> (stream: ReadableStream<T>, options: BrowserReadableStreamToItOptions = {}): AsyncGenerator<T, void, undefined> {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      await reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}