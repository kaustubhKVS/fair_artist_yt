{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createRmAll = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  function rmAll(source) {\n    try {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return async function* () {\n        for await (const {\n          path,\n          recursive\n        } of normaliseInput(source)) {\n          const searchParams = new URLSearchParams(options.searchParams);\n          searchParams.append('arg', `${path}`);\n          if (recursive != null) searchParams.set('recursive', String(recursive));\n          const res = await api.post('pin/rm', {\n            signal: options.signal,\n            headers: options.headers,\n            searchParams: toUrlSearchParams({\n              ...options,\n              arg: `${path}`,\n              recursive\n            })\n          });\n          for await (const pin of res.ndjson()) {\n            if (pin.Pins) {\n              // non-streaming response\n              yield* pin.Pins.map(( /** @type {string} */cid) => CID.parse(cid));\n              continue;\n            }\n            yield CID.parse(pin);\n          }\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  return rmAll;\n});","map":{"version":3,"names":["CID","configure","normaliseInput","toUrlSearchParams","createRmAll","api","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","res","post","signal","headers","arg","pin","ndjson","Pins","map","cid","parse"],"sources":["/Users/harshatolani/Downloads/Fall22/Distributed Database System/Project/my branch/fair_artist_yt/node_modules/ipfs-http-client/src/pin/rm-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createRmAll = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,cAAc,QAAQ,sCAAsC;AACrE,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC1C;AACF;AACA;EACE,SAAiBC,KAAK,CAAEC,MAAM;IAAA;MAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;MAAA,0BAAE;QAC5C,WAAW,MAAM;UAAEC,IAAI;UAAEC;QAAU,CAAC,IAAIR,cAAc,CAACK,MAAM,CAAC,EAAE;UAC9D,MAAMI,YAAY,GAAG,IAAIC,eAAe,CAACJ,OAAO,CAACG,YAAY,CAAC;UAC9DA,YAAY,CAACE,MAAM,CAAC,KAAK,EAAG,GAAEJ,IAAK,EAAC,CAAC;UAErC,IAAIC,SAAS,IAAI,IAAI,EAAEC,YAAY,CAACG,GAAG,CAAC,WAAW,EAAEC,MAAM,CAACL,SAAS,CAAC,CAAC;UAEvE,MAAMM,GAAG,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,QAAQ,EAAE;YACnCC,MAAM,EAAEV,OAAO,CAACU,MAAM;YACtBC,OAAO,EAAEX,OAAO,CAACW,OAAO;YACxBR,YAAY,EAAER,iBAAiB,CAAC;cAC9B,GAAGK,OAAO;cACVY,GAAG,EAAG,GAAEX,IAAK,EAAC;cACdC;YACF,CAAC;UACH,CAAC,CAAC;UAEF,WAAW,MAAMW,GAAG,IAAIL,GAAG,CAACM,MAAM,EAAE,EAAE;YACpC,IAAID,GAAG,CAACE,IAAI,EAAE;cAAE;cACd,OAAQF,GAAG,CAACE,IAAI,CAACC,GAAG,CAAC,EAAC,qBAAsBC,GAAG,KAAKzB,GAAG,CAAC0B,KAAK,CAACD,GAAG,CAAC,CAAC;cACnE;YACF;YACA,MAAMzB,GAAG,CAAC0B,KAAK,CAACL,GAAG,CAAC;UACtB;QACF;MACF,CAAC;IAAA;MAAA;IAAA;EAAA;EACD,OAAOf,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}